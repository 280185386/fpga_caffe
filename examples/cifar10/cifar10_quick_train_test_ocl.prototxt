name: "CIFAR10_quick"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "examples/cifar10/cifar10_train_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "examples/cifar10/cifar10_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "PROGRAM3"
  type: "XCLProgram"
  xcl_param {
    xcl_name: "cr_layer_fb_half.xclbin"
    kernel_name: "cr_layer_fb_half"
    once: true
  }
}
layer {
  name: "HALF1"
  type: "HalfConversion"
  bottom: "data"
  top: "half1"
  half_conversion_param {
    convert_to: true
  }
}
layer {
  name: "conv1"
  type: "OCLCR"
  bottom: "half1"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 1 
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
    engine: OCL
    subengine: DIRECT
  }
  ocl_enable: true
  cr_param {
    relu: 0 
  }
}
layer {
  name: "HALF2"
  type: "HalfConversion"
  bottom: "conv1"
  top: "half2"
  half_conversion_param {
    convert_to: false
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "half2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "pool1"
}
layer {
  name: "HALF3"
  type: "HalfConversion"
  bottom: "pool1"
  top: "half3"
  half_conversion_param {
    convert_to: true
  }
}
layer {
  name: "conv2"
  type: "OCLCR"
  bottom: "half3"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 1 
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
    engine: OCL
    subengine: DIRECT
  }
  ocl_enable: true
  cr_param {
    relu: 0 
  }
}
layer {
  name: "HALF4"
  type: "HalfConversion"
  bottom: "conv2"
  top: "half4"
  half_conversion_param {
    convert_to: false
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "half4"
  top: "half4"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "half4"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "PAD5"
  type: "Pad"
  bottom: "pool2"
  top: "pad5"
  pad_param {
    pad: true
  }
}
layer {
  name: "HALF5"
  type: "HalfConversion"
  bottom: "pad5"
  top: "half5"
  half_conversion_param {
    convert_to: true
  }
}
layer {
  name: "conv3"
  type: "OCLCR"
  bottom: "half5"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 1 
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
    engine: OCL
    subengine: DIRECT
  }
  ocl_enable: true
  cr_param {
    relu: 0 
  }
}
layer {
  name: "HALF6"
  type: "HalfConversion"
  bottom: "conv3"
  top: "half6"
  half_conversion_param {
    convert_to: false
  }
}
layer {
  name: "PAD6"
  type: "Pad"
  bottom: "half6"
  top: "pad6"
  pad_param {
    pad: false
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "pad6"
  top: "pad6"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "pad6"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
