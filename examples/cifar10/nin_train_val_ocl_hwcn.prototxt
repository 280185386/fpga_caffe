name: "CIFAR10_full"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "examples/cifar10/cifar-train-leveldb"
    batch_size: 128 
  }
  include: { phase: TRAIN }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "examples/cifar10/cifar-test-leveldb"
    batch_size: 256
  }
  include: { phase: TEST }
}
layer {
  name: "PROGRAM3"
  type: "XCLProgram"
  xcl_param {
    xcl_name: "crp_layer_hwcn_cpfp.xclbin"
    kernel_name: "crp_layer_hwcn_cpfp"
    once: true
  }
}
layer {
  name: "HWCN1"
  type: "HWCN"
  bottom: "data"
  top: "hwcn1"
  hwcn_param {
    convert_to: true
  }
}
layer {
  name: "PAD1"
  type: "Pad"
  bottom: "hwcn1"
  top: "pad1"
  pad_param {
    pad: true
    axis: 2 
    pad_to: 4 
  }
}
layer {
  name: "CPFP1"
  type: "CPFPConversion"
  bottom: "pad1"
  top: "cpfp1"
  cpfp_conversion_param {
    convert_to: true
  }
}
layer {
  name: "conv1"
  type: "OCLCRHWCN"
  bottom: "cpfp1"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp1"
  type: "OCLCRHWCN"
  bottom: "conv1"
  top: "cccp1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 160
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp2"
  type: "OCLCRHWCN"
  bottom: "cccp1"
  top: "cccp2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "pool1"
  type: "OCLPoolingHWCN"
  bottom: "cccp2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "CPFP_D1"
  type: "CPFPConversion"
  bottom: "pool1"
  top: "cpfp_d1"
  cpfp_conversion_param {
    convert_to: false
  }
}
layer {
  name: "drop3"
  type: "Dropout"
  bottom: "cpfp_d1"
  top: "cpfp_d1"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "CPFP_D2"
  type: "CPFPConversion"
  bottom: "cpfp_d1"
  top: "cpfp_d2"
  cpfp_conversion_param {
    convert_to: true
  }
}
layer {
  name: "conv2"
  type: "OCLCRHWCN"
  bottom: "cpfp_d2"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    pad: 2
    kernel_size: 5
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp3"
  type: "OCLCRHWCN"
  bottom: "conv2"
  top: "cccp3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp4"
  type: "OCLCRHWCN"
  bottom: "cccp3"
  top: "cccp4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "pool2"
  type: "OCLPoolingHWCN"
  bottom: "cccp4"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "OCLCRHWCN"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp5"
  type: "OCLCRHWCN"
  bottom: "conv3"
  top: "cccp5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 192
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 16
    num_pe: 4
  }
}
layer {
  name: "cccp6"
  type: "OCLCRHWCN"
  bottom: "cccp5"
  top: "cccp6"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.1
    decay_mult: 0
  }
  convolution_param {
    num_output: 16
    group: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.05
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
  cr_param {
    relu: 1 
    num_cu: 8 
    num_pe: 4
  }
}
layer {
  name: "CPFP2"
  type: "CPFPConversion"
  bottom: "cccp6"
  top: "cpfp2"
  cpfp_conversion_param {
    convert_to: false
  }
}
layer {
  name: "HWCN2"
  type: "HWCN"
  bottom: "cpfp2"
  top: "hwcn2"
  hwcn_param {
    convert_to: false
  }
}
layer {
  name: "PAD2"
  type: "Pad"
  bottom: "hwcn2"
  top: "pad2"
  pad_param {
    pad: false 
    axis: 1
    pad_to: 10
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "pad2"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 8
    stride: 1
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "pool3"
  bottom: "label"
  top: "accuracy"
  include: { phase: TEST }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss" 
  bottom: "pool3"
  bottom: "label"
  top: "loss"
}
